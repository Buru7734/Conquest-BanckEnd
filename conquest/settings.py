"""
Django settings for conquest project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv(override=True)
import dj_database_url


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

ALLOWED_HOSTS = os.getenv(
    "DJANGO_ALLOWED_HOSTS",
    ".up.railway.app,localhost,127.0.0.1"
).split(",")

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Adjust the port if your frontend runs on a different one
]

CSRF_TRUSTED_ORIGINS = os.getenv(                             
    "CSRF_TRUSTED_ORIGINS",
    "https://*.up.railway.app"
).split(",")

# CORS_ALLOW_ALL_ORIGINS = True

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "dev-insecure-key")
DEBUG = os.getenv("DJANGO_DEBUG", "False").lower() == "true"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework',
    'main_app',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'conquest.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'conquest.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

# Configuration for simple JWT
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

ENVIRONMENT = os.getenv("DJANGO_ENV", "development")

if ENVIRONMENT == "production":
    DATABASES = {
        "default": dj_database_url.config(
            default=os.getenv("DATABASE_URL"),
            conn_max_age=600,
        )
    }
else:
    # Local development — use SQLite or local Postgres
   DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgres",
            "NAME": "conquest",
        }
    }

# # Database configuration
# # ---------------------------------------------------------
# db_url = os.getenv("DATABASE_URL")

# # Safety check: if the env var is empty or invalid, fallback to local Postgres
# if not db_url or db_url.strip() in ("", "://"):
#     print("⚠️  No valid DATABASE_URL found — using local PostgreSQL.")
#     db_url = "postgresql://santiagoaramburu@localhost:5432/conquest"

# DATABASES = {
#     "default": dj_database_url.config(default=db_url, conn_max_age=600)
# }

# # Force SSL and production optimizations when deployed
# if "RAILWAY_ENVIRONMENT" in os.environ:
#     DATABASES["default"]["OPTIONS"] = {"sslmode": "require"}
#     ALLOWED_HOSTS = ["*"]  # or your Railway domain
#     DEBUG = False



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"  # NEW

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",  # NEW
    },
}

# ON_RAILWAY = "RAILWAY_ENVIRONMENT" in os.environ


# if ON_RAILWAY:
#     MIDDLEWARE.insert(1, "whitenoise.middleware.WhiteNoiseMiddleware")

# # ---------------------------------------------------------
# # CORS CONFIGURATION
# # ---------------------------------------------------------
# if ON_RAILWAY:
#     # Replace this with your deployed frontend URL once live
#     CORS_ALLOWED_ORIGINS = [
#         "https://your-frontend-domain.vercel.app",
#     ]
# else:
#     CORS_ALLOWED_ORIGINS = [
#         "http://localhost:3000",
#     ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

import sys
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}

